// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	books "be15/clean/features/books"

	mock "github.com/stretchr/testify/mock"
)

// BookServiceInterface is an autogenerated mock type for the BookServiceInterface type
type BookServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *BookServiceInterface) Create(input books.Core) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(books.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *BookServiceInterface) GetAll() ([]books.Core, error) {
	ret := _m.Called()

	var r0 []books.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]books.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []books.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]books.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooksByUserId provides a mock function with given fields: userid
func (_m *BookServiceInterface) GetBooksByUserId(userid int) ([]books.Core, error) {
	ret := _m.Called(userid)

	var r0 []books.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]books.Core, error)); ok {
		return rf(userid)
	}
	if rf, ok := ret.Get(0).(func(int) []books.Core); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]books.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookServiceInterface creates a new instance of BookServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookServiceInterface(t mockConstructorTestingTNewBookServiceInterface) *BookServiceInterface {
	mock := &BookServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
